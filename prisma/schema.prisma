generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  password         String?
  createdAt        DateTime         @default(now())
  emailVerified    DateTime?
  image            String?
  updatedAt        DateTime         @default(now())
  role             UserRole         @default(USER)
  stripeCustomerId String?          @unique
  accounts         Account[]
  addToCartEvents  AddToCartEvent[]
  addresses        Address[]
  cart             Cart?
  cartItems        CartItem[]
  media            Media[]
  orders           Order[]
  productViews     ProductView[]
  returns          Return[]
  reviews          Review[]
  sessions         Session[]
  wishlist         Wishlist?
  wishlistItems    WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id             String     @id @default(cuid())
  name           String
  slug           String     @unique
  description    String?
  image          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  order          Int        @default(0)
  parentId       String?
  isActive       Boolean    @default(true)
  seoDescription String?
  seoKeywords    String?
  seoTitle       String?
  parent         Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children       Category[] @relation("CategoryToCategory")
  products       Product[]
}

model Collection {
  id              String               @id @default(cuid())
  name            String
  description     String?
  image           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  conditions      Json?
  isActive        Boolean              @default(true)
  order           Int                  @default(0)
  seoDescription  String?
  seoKeywords     String?
  seoTitle        String?
  type            CollectionType       @default(MANUAL)
  showOnHomePage  Boolean              @default(false)
  image2          String?
  displaySection  DisplaySection       @default(NONE)
  handle          String               @unique
  descriptionHtml String?
  metaDescription String?
  metaKeywords    String?
  metaTitle       String?
  ogImage         String?
  publishedAt     DateTime?
  twitterImage    String?
  sortBy          CollectionSortOption @default(MANUAL)
  rules           CollectionRule[]
  products        ProductCollection[]
}

model CollectionRule {
  id           String     @id @default(cuid())
  collectionId String
  field        String
  operator     String
  value        String
  order        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([collectionId])
}

model Product {
  name                  String
  description           String
  price                 Decimal                @db.Decimal(10, 2)
  categoryId            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  stock                 Int                    @default(0)
  reservedStock         Int                    @default(0)
  slug                  String?                @unique
  id                    Int                    @id @default(autoincrement())
  isActive              Boolean                @default(true)
  status                ProductStatus          @default(ACTIVE)
  image                 String?
  descriptionHtml       String?
  sku                   String?                @unique
  inventoryTracking     Boolean                @default(false)
  lowStockThreshold     Int                    @default(5)
  handle                String?                @unique
  addToCartEvents       AddToCartEvent[]
  cartItems             CartItem[]
  inventoryTransactions InventoryTransaction[]
  orderItems            OrderItem[]
  category              Category?              @relation(fields: [categoryId], references: [id])
  analytics             ProductAnalytics?
  collections           ProductCollection[]
  images                ProductImage[]
  variants              ProductVariant[]
  productViews          ProductView[]
  promotionalProducts   PromotionalProduct[]
  returnItems           ReturnItem[]
  reviews               Review[]
  wishlistItems         WishlistItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int      @default(0)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  sku                   String                 @unique
  barcode               String?
  price                 Decimal                @db.Decimal(10, 2)
  compareAtPrice        Decimal?               @db.Decimal(10, 2)
  weight                Float?
  weightUnit            String?                @default("kg")
  dimensions            Json?
  options               Json
  stock                 Int                    @default(0)
  isActive              Boolean                @default(true)
  attributes            Json?
  images                String[]
  inventoryTracking     Boolean                @default(true)
  lowStockThreshold     Int?                   @default(5)
  name                  String
  reservedStock         Int                    @default(0)
  id                    Int                    @id @default(autoincrement())
  productId             Int
  addToCartEvents       AddToCartEvent[]
  cartItems             CartItem[]
  inventoryTransactions InventoryTransaction[]
  orderItems            OrderItem[]
  product               Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productViews          ProductView[]
  promotionalProducts   PromotionalProduct[]
  returnItems           ReturnItem[]
  reviews               Review[]
  wishlistItems         WishlistItem[]

  @@index([productId])
}

model ProductCollection {
  collectionId String
  productId    Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
}

model Order {
  id                    String        @id @default(cuid())
  userId                String
  status                OrderStatus   @default(PENDING)
  total                 Float
  shippingAddressId     String
  paymentMethod         PaymentMethod
  paymentStatus         PaymentStatus @default(PENDING)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  trackingNumber        String?
  couponId              String?
  discountAmount        Float?        @default(0)
  stripePaymentIntentId String?       @unique
  stripeSessionId       String?       @unique
  currency              String        @default("myr")
  amountSubtotal        Int?
  amountTotal           Int?
  coupon                Coupon?       @relation(fields: [couponId], references: [id])
  shippingAddress       Address       @relation(fields: [shippingAddressId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  notes                 OrderNote[]
  returns               Return[]
}

model OrderItem {
  orderId       String
  quantity      Int
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  id            Int             @id @default(autoincrement())
  productId     Int?
  variantId     Int?
  currency      String          @default("myr")
  stripePriceId String?
  unitAmount    Int?
  order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product?        @relation(fields: [productId], references: [id])
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  returnItems   ReturnItem[]

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  cartId    String
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  id        Int             @id @default(autoincrement())
  productId Int?
  variantId Int?
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product?        @relation(fields: [productId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  city      String
  state     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String
  zipCode   String
  phone     String
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
}

model OrderNote {
  id         String   @id @default(cuid())
  orderId    String
  content    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShippingZone {
  id        String         @id @default(cuid())
  name      String
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      String
  rates     ShippingRate[]
}

model ShippingRate {
  id            String       @id @default(cuid())
  zoneId        String
  name          String
  price         Decimal      @db.Decimal(10, 2)
  minOrderValue Decimal?     @db.Decimal(10, 2)
  maxOrderValue Decimal?     @db.Decimal(10, 2)
  minWeight     Decimal?     @db.Decimal(10, 2)
  maxWeight     Decimal?     @db.Decimal(10, 2)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  zone          ShippingZone @relation(fields: [zoneId], references: [id])
}

model InventoryTransaction {
  quantity  Int
  reference String?
  createdAt DateTime        @default(now())
  notes     String?
  type      TransactionType
  updatedAt DateTime        @updatedAt
  id        Int             @id @default(autoincrement())
  productId Int?
  variantId Int?
  product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([variantId])
}

model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  description   String?
  discountType  DiscountType
  discountValue Float
  minPurchase   Float?
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usageCount    Int          @default(0)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
}

model PromotionalCampaign {
  id            String               @id @default(cuid())
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime
  discountType  DiscountType
  discountValue Float
  minPurchase   Float?
  maxDiscount   Float?
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  products      PromotionalProduct[]
}

model PromotionalProduct {
  promotionalCampaignId String
  discountType          DiscountType        @default(PERCENTAGE)
  discountValue         Decimal
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  variantId             Int?
  id                    Int                 @id @default(autoincrement())
  productId             Int
  product               Product             @relation(fields: [productId], references: [id])
  promotionalCampaign   PromotionalCampaign @relation(fields: [promotionalCampaignId], references: [id])
  variant               ProductVariant?     @relation(fields: [variantId], references: [id])
}

model Review {
  userId    String
  rating    Int
  title     String?
  content   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  status    ReviewStatus    @default(PENDING)
  variantId Int?
  id        Int             @id @default(autoincrement())
  productId Int?
  product   Product?        @relation(fields: [productId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([variantId])
  @@index([userId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  wishlistId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  userId     String
  variantId  Int?
  id         Int             @id @default(autoincrement())
  productId  Int?
  product    Product?        @relation(fields: [productId], references: [id])
  user       User            @relation(fields: [userId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  wishlist   Wishlist        @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([productId])
  @@index([variantId])
}

model Return {
  id        String       @id @default(cuid())
  orderId   String
  userId    String
  status    ReturnStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  refund    Refund?
  order     Order        @relation(fields: [orderId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  items     ReturnItem[]
}

model Refund {
  id        String       @id @default(cuid())
  returnId  String       @unique
  amount    Decimal      @db.Decimal(10, 2)
  status    RefundStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  return    Return       @relation(fields: [returnId], references: [id])
}

model ReturnItem {
  returnId    String
  quantity    Int
  reason      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  status      ReturnStatus    @default(PENDING)
  id          Int             @id @default(autoincrement())
  orderItemId Int
  productId   Int
  variantId   Int?
  orderItem   OrderItem       @relation(fields: [orderItemId], references: [id])
  product     Product         @relation(fields: [productId], references: [id])
  return      Return          @relation(fields: [returnId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
}

model ProductView {
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime        @default(now())
  sessionId String?
  variantId Int?
  id        Int             @id @default(autoincrement())
  productId Int?
  product   Product?        @relation(fields: [productId], references: [id])
  user      User?           @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([variantId])
  @@index([userId])
}

model AddToCartEvent {
  userId    String?
  createdAt DateTime        @default(now())
  quantity  Int
  sessionId String?
  updatedAt DateTime        @updatedAt
  variantId Int?
  id        Int             @id @default(autoincrement())
  productId Int
  product   Product         @relation(fields: [productId], references: [id])
  user      User?           @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Media {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  size       Int
  width      Int?
  height     Int?
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [uploadedBy], references: [id])

  @@index([uploadedBy])
}

model ProductAnalytics {
  id             Int      @id @default(autoincrement())
  productId      Int      @unique
  totalViews     Int      @default(0)
  uniqueViews    Int      @default(0)
  addToCartCount Int      @default(0)
  purchaseCount  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CollectionType {
  MANUAL
  AUTOMATED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ShippingZoneType {
  WEST_MALAYSIA
  EAST_MALAYSIA
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum TransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  RESERVED
  RELEASED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}

enum DisplaySection {
  FEATURED
  COMPLETE
  NONE
}

enum CollectionSortOption {
  MANUAL
  BEST_SELLING
  TITLE_ASC
  TITLE_DESC
  PRICE_ASC
  PRICE_DESC
  CREATED_ASC
  CREATED_DESC
}
